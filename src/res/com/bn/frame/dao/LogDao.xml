<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.2//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bn.frame.dao.LogDao">

    <!-- 返回系统登陆日志的(PO)数据对象 -->
    <sql id="resultLogObj">
        select
        s.LOG_ID "logId",
        s.USER_ID "userId",
        s.LOGIN_TIME "loginTime",
        s.LOGOUT_TIME "logoutTime",
        s.LAST_ACCESS_TIME "lastAccessTime",
        s.TEST_TIME "testTime",
        s.IP "ip",
        s.STATUS "status"
    </sql>

    <!-- 返回查询出的数据结果集 -->
    <select id="findPage" parameterType="com.bn.javax.dao.Page" resultType="com.bn.frame.po.LogPo">
        <include refid="resultLogObj"/>
        ,u.user_name "userName"
        FROM sys_log s
        LEFT JOIN sys_user u ON u.user_id=s.user_id
        where
        <if test="params.bo.keyWord != null and params.bo.keyWord != ''">
            and (s.USER_ID like '%${params.bo.keyWord}%'
            or u.user_name like '%${params.bo.keyWord}%')
        </if>
        <if test="params.bo.status != null and params.bo.status != ''">
            and s.STATUS='${params.bo.status}'
        </if>
        <if test="params.bo.beginTime != null and params.bo.beginTime != ''">
            and date_format( s.LOGIN_TIME,'%Y-%m-%d %T') &gt;= date_format('${params.bo.beginTime}','%Y-%m-%d %T')
        </if>
        <if test="params.bo.endTime != null and params.bo.endTime != ''">
            and date_format(s.LOGOUT_TIME,'%Y-%m-%d %T') &lt;= date_format('${params.bo.endTime}','%Y-%m-%d %T')
        </if>
        <if test="params.bo.sort != null and params.bo.sort != ''">
            order by ${params.bo.sort}
            <if test="params.bo.order != null and params.bo.order != ''">
                ${params.bo.order}
            </if>
        </if>
        <!-- 默认排序方式 -->
        <if test="params.bo.order == null or params.bo.order == ''">
            order by status DESC,s.LOGIN_TIME DESC
        </if>
    </select>

    <!-- 根据日志Id查询信息 -->
    <select id="findById" parameterType="Integer" resultType="com.bn.frame.po.LogPo">
        <include refid="resultLogObj"/>
        ,u.user_name "userName"
        from sys_log s
        left join sys_user u on u.user_id=s.user_id
        where s.log_id = #{logId}
    </select>

    <!-- 修改系统登陆日志对象-->
    <update id="updateLog" parameterType="com.bn.frame.po.LogPo">
        update sys_log
        set
        user_id = #{userId},
        login_time = #{loginTime},
        last_access_time = #{lastAccessTime},
        test_time = #{testTime},
        ip = #{ip},
        status = #{status}
        where log_id = #{logId}
    </update>

    <!-- 根据主键查找系统登陆日志对象-->
    <select id="findOfflineLogList" parameterType="java.util.HashMap" resultType="com.bn.frame.po.LogPo">
        <include refid="resultLogObj"/>
        from sys_log s
        where
        s.last_access_time &lt; #{lastTime}
        and s.STATUS = '1'
    </select>

    <!-- 修改为下线状态 -->
    <update id="updateLogStatus" parameterType="String">
        update sys_log
        set status = '0', logout_time = now()
        where log_id=#{logId}
    </update>

    <!-- 刷新系统登录日志最后访问时间 -->
    <update id="updateLastAccessTime" parameterType="String">
        update sys_log
        set last_access_time = now()
        where log_id=#{logId}
    </update>

    <!-- 新增系统登陆日志对象-->
    <insert id="addSysLog" parameterType="com.bn.frame.po.LogPo">
        <selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="logId">
            select nextval('SEQ_SYS_LOG') as "logId"
        </selectKey>
        insert into sys_log (
        log_id,
        user_id,
        login_time,
        last_access_time,
        test_time,
        ip,
        status
        ) values (
        #{logId},
        #{userId},
        str_to_date('${loginTime}', '%Y-%m-%d %T'),
        str_to_date('${lastAccessTime}', '%Y-%m-%d %T'),
        str_to_date('${testTime}', '%Y-%m-%d %T'),
        #{ip},
        #{status}
        )
    </insert>
</mapper>
